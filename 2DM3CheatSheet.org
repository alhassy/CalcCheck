#+TITLE: Reference Sheet for Discrete Maths
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]] and Wolfram Kahl
#+EMAIL: alhassy@gmail.com
#+DESCRIPTION: This document is written by Musa Al-hassy for his learning in the spring of 2018.
#+STARTUP: hideblocks
#+STARTUP: overview
#+INCLUDE: ~/CheatSheet/CheatSheetSetup.org
# This file is built around the system https://github.com/alhassy/CheatSheet

#+todo: space

# Make HTML
# (f-move (org-html-export-to-html) "~/CalcCheck/LectureNotes.html")
#+HTML_HEAD: <link href="https://alhassy.github.io/org-notes-style.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/floating-toc.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/blog-banner.css" rel="stylesheet" type="text/css" />
# The last one has the styling for lists.

# Example unicode declarations; see section “unicode” below.
# make a symbolic link!
# https://armkeh.github.io/unicode-sty/
#+LATEX_HEADER: \usepackage{\string~"/unicode-sty/unicode"}
#+LATEX_HEADER: \newunicodechar{⋆}{\ensuremath{\star}}
#+LATEX_HEADER: \newunicodechar{⨾}{\ensuremath{;}}
#+LATEX_HEADER: \newunicodechar{′}{\ensuremath{'}}
#+LATEX_HEADER: \newunicodechar{⊇}{\ensuremath{\supseteq}}
#+LATEX_HEADER: \newunicodechar{─}{---}
#+LATEX_HEADER: \newunicodechar{◁}{\ensuremath{\lhd}}
#+LATEX_HEADER: \newunicodechar{▷}{\ensuremath{\rhd}}

#+LATEX_HEADER: \newunicodechar{⇒}{\ensuremath{\Rightarrow}}
#+latex: \def\implies{\Rightarrow}

# +LATEX_HEADER: \newunicodechar{⇒}{\ensuremath{\Rightarrow}}
# The ⇒ in unicode.sty has extra spacing?

#+latex: \def\true{\mathsf{true}}
#+latex: \def\false{\mathsf{false}}

#+latex: \def\remark#1{\color{gray!80} #1}

* Propositional Calculus
  :PROPERTIES:
  :CUSTOM_ID: Propositional-Calculus
  :END:

# + Metatheorem :: Any two theorems are equivalent; ‘$\true$’ is a theorem.

Order of decreasing binding power: =, ¬, ∧/∨, ⇒/⇐, ≡/≢.

*[[https://ac.els-cdn.com/S0020019000002052/1-s2.0-S0020019000002052-main.pdf?_tid=35e86bb2-edb0-11e7-b1fe-00000aab0f26&acdnat=1514672861_56b3d86466d284cbc76cc2641c47af86][Equivales]]* is the only equivalence relation that is associative
@@latex:\newline@@ $((p \equiv q) \equiv r)\equivs (p \equiv (q \equiv r))$, and
it is symmetric and has identity $\true$.

# +latex: \vspace{0.1em}
*Discrepancy* (difference) ‘≢’ is symmetric, associative, has identity ‘$\false$’,
mutually associates with equivales $((p \not\equiv q) \equiv r) \equivs (p
\not\equiv (q \equiv r))$, and mutually interchanges with it as well $(p
\not\equiv q \equiv r) \equivs (p \equiv q \not\equiv r)$.
Finally, negation commutes with difference: $¬ (p ≡ q) ≡ ¬ p ≡ q$.

*** implication                                                      :ignore:
    :PROPERTIES:
    :CUSTOM_ID: implication
    :END:

#+latex: \vspace{0.1em}

*Implication* has the alternative definition $p \implies q \;\equiv\; \lnot p \lor
q$, thus having $\true$ as both left identity and right zero; it distributes
over $\equiv$ in the second argument, and is self-distributive; and has the
properties:
#+latex: \vspace{-0.5em}
#+begin_parallel

+ Shunting :: $p \land q \implies r \;≡\;  p \implies (q \implies r)$
  @@latex:\vspace{1em}@@
+ Contrapositive ::  $p \implies q \quad\equiv\quad \lnot q \implies \lnot p$
    @@latex:\vspace{1em}@@
+ Leibniz :: $e = f \;⇒\; E[z ≔ e] = E[z := f]$

#+columnbreak:
#+latex: \columnbreak

+ Modus Ponens :: @@latex:\invisible{hi}\vspace{0.5em}@@
  | $p \land (p \implies q)$ | $\equiv$  | $p \land q$ |
  | $p \land (q \implies p)$ | $\equiv$  | $p$         |
  | $p \land (p \implies q)$ | $\implies$ | $q$         |

#+end_parallel

It is a /linear/ order relation generated by ‘$\false \implies \true$’; whence
“from false, follows anything”: $\false \implies p$.  Moreover it has the useful
properties “(3.62) Contextualisation”: $p \implies (q \equiv r) \;≡\; p \land q
\equivs p \land r$ ---we /have/ the context /p/ in each side of the equivalence---
and $p ⇒ (q ⇒ r) \;≡\; p ∧ q \,⇒\, p ∧ r$.
Implication is “Sub-associative”: $((p ⇒ q) ⇒ r) \;⇒\; (p ⇒ (q ⇒ r))$.
Finally, we have “≡-≡ Elimination”:
$(p ≡ q ≡ r) ⇒ s \;≡\; p ⇒ s \;≡\; q ⇒ s \;≡\; r ⇒ s$.

*** conjunction and disjunction                                      :ignore:
    :PROPERTIES:
    :CUSTOM_ID: conjunction-and-disjunction
    :END:

#+latex: \vspace{0.1em}

*Conjunction and disjunction* distribute over one another, are both associative
and symmetric, ∨ has identity $\false$ and zero $\true$ whereas ∧ has identity
$\true$ and zero $\false$, $\lor$ distributes over $∨, ≡, ∧, ⇒, ⇐$ whereas
$\land$ distributes over $\equiv\!-\!\equiv$ in that $p \land (q \equiv r
\equiv s) \;≡\; p \land q \equivs p \land r \equivs p \land s$, and they
satisfy,

| *Excluded Middle* | *Contradiction*      | *Absorption*              | *De Morgan*               |
| $p ∨ ¬p$        | $p ∧ ¬ p ≡~\false$ | $p ∧ (q ∨ ¬ p) ≡ p ∧ q$ | $¬ (p ∧ q) ≡ ¬ p ∨ ¬ q$ |
|                 |                    | $p ∨ (q ∨ ¬ p) ≡ p ∨ q$ | $¬ (p ∨ q) ≡ ¬ p ∧ ¬ q$ |

Most importantly, they satisfy the *“Golden Rule”*: $p ∧ q ≡ p ≡ q ≡ p ∨ q$.

**** COMMENT alternate table
     :PROPERTIES:
     :CUSTOM_ID: COMMENT-alternate-table
     :END:
#+begin_parallel 3

+ Excluded Middle ::  $p \lor \lnot p$

+ Contradiction ::
  #+LaTeX: {hi. \vspace{-2em} $\invisible{Hi! Hello!}~p \land \lnot p \equiv~\false$}

  # + \scriptsize Contradiction :: \scriptsize $p \land \lnot p \equiv~\false$

#+latex: \columnbreak

+ Absorption ::
    | $p ∧ (q ∨ ¬ p)$ | ≡ | $p ∧ q$ |
    | $p ∨ (q ∧ ¬ p)$ | ≡ | $p ∨ q$ |

#+latex: \columnbreak

+ De Morgan ::
   | $\lnot (p \land q)$ | \equiv | $\lnot p \lor  \lnot q$ |
   | $\lnot (p \lor q)$  | \equiv | $\lnot p \land \lnot q$ |

#+end_parallel

*** Max/Min :ignore:

#+latex: \vspace{-0.1em}

*Max ↑ and Min ↓* each distribute over the other, addition distributes over both,
subtraction acts like De Morgans, the operators are selective, and non-negative
multiplication distributes over both.
#+latex: {\remark{(\emph{Tropical mathematics} is math with ‘↑, +’ instead of ‘+, ×’.)}}
# +latex: \remark{(Working with the max-plus calculus, ‘+, ↑’, is known as \emph{tropical mathematics}.)}

*** Remaining properties :ignore:

#+latex: \vspace{-0.1em}

The many other properties of these operations ---such as weakening laws and
other absorption laws and case-analysis (⊔-char)--- can be found by looking at
the list of /lattice properties/ ---since /both/ the Booleans (⇒, ∧, ∨) and numbers
(≤, ↓, ↑) are lattices.

* COMMENT Contextual Laws

+ Axiom, Leibniz :: $e = f ⇒ E[z ≔ e] = E[z := f]$
  - “Replacement, Context”: $P \,∧\, e = f ⇒ E[z ≔ e] = E[z := f]$
    # Shunting, then leibniz, then right zero of ⇒
  - “Replacement, Context”: $P \,∧\, e = f ⇒ E[z ≔ e] \;≡\; P \,∧\, e = f ⇒ E[z := f]$
  - “Replacement, Context”: $e = f \,∧\, E[z ≔ e] \;≡\; e = f \,∧\, E[z := f]$

+ Replacing variables by Boolean constants ::

  - “Replace by true”: $q ∧ p ⇒ E^z_p \;≡\; q ∧ p ⇒ E^z_\true$
  - “Replace by false”: $E^z_p ⇒ p ∨ q \;≡\; E^z_\false ⇒ p ∨ q$
  - “Replace by true”: $p ∧ E_p^z \;≡\; p ∧ E_\true^z$
  - “Replace by false”: $p ∨ E_p^z \;≡\; p ∨ E_\false^z$
  - “Case analysis”: $E_p^z \;≡\; (p ∧ E_\true^z) ∨ (¬  p ∧ E_\false^z)$

* newpage                                                            :ignore:
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-newpage
  :END:
\columnbreak
* Orders

#+latex: \vspace{1em}
An /order/ is a relation $\_⊑\_ \,:\, τ → τ → 𝔹$  satisfying the following three properties:
|             |   |                                 |   |                                 |
| *Reflexivity* |   | *Transitivity*                    |   | *Mutual Inclusion*                |
| $a ⊑ a$     |   | $a ⊑ b \,∧\, b ⊑ c \,⇒\, a ⊑ c$ |   | $a ⊑ b \,∧\, b ⊑ a \;≡\; a = b$ |

# *Antisymmetry* $a ⊑ b \,∧\, b ⊑ a \,⇒\, a = b$ |                        |
# Lemma “Reflexivity of ⊑”: R = S ⇒ R ⊑ S
# - Theorem “Mutual inclusion”: R = S ≡ R ⊑ S ∧ S ⊑ R
# - Axiom “Opposite inclusion”: R ⊒ S ≡ S ⊑ R

Indirect Inclusion is like ‘set inclusion’ and Indirect Equality is like ‘set
extensionality’.

# Provided ¬occurs(`z`, `x, y`)
# - Indirect Equality (from above) ::  $x = y \;≡\; (∀ z • x ⊑ z ≡ y ⊑ z )$
# - Indirect Equality (from below) ::  $x = y \;≡\; (∀ z • z ⊑ x ≡ z ⊑ y )$
# - Indirect Inclusion (from above) :: $x ⊑ y \;≡\; (∀ z • y ⊑ z ⇒ x ⊑ z )$
# - Indirect Inclusion (from below) :: $x ⊑ y \;≡\; (∀ z • z ⊑ x ⇒ z ⊑ y )$
#
|                                      |                                      |
| *Indirect Equality (from above)*       | *Indirect Inclusion (from above)*      |
| $x = y \;≡\; (∀ z • x ⊑ z ≡ y ⊑ z )$ | $x ⊑ y \;≡\; (∀ z • y ⊑ z ⇒ x ⊑ z )$ |
|                                      |                                      |
| *Indirect Equality (from below)*       | *Indirect Inclusion (from below)*      |
| $x = y \;≡\; (∀ z • z ⊑ x ≡ z ⊑ y )$ | $x ⊑ y \;≡\; (∀ z • z ⊑ x ⇒ z ⊑ y )$ |

An order is /bounded/ if there are elements $⊤, ⊥ : τ$ being the lower and upper bounds of all other elements:
|                |                     |   |                   |                     |
| *Top Element*    | $a \,⊑\, ⊤$         |   | *Bottom Element*    | $⊥ \,⊑\, a$         |
|                |                     |   |                   |                     |
| *Top is maximal* | $⊤ ⊑ a \;≡\; a = ⊤$ |   | *Bottom is minimal* | $a ⊑ ⊥ \;≡\; a = ⊤$ |

* Lattices
  :PROPERTIES:
  :CUSTOM_ID: Lattices
  :END:

#  Equaltiy via joins :: x = y ≡ (∀ z • x ⊔ z = y ⊔ z)

A /lattice/ is a pair of operations $\_⊓\_,\, \_⊔\_ \,:\, τ → τ → τ$ specified by the properties:
|                                         |                     |                                         |
| *⊔-Characterisation*                      | @@latex: $\qquad$@@ | *⊓-Characterisation*                      |
| $a ⊑ c \,∧\, b ⊑ c \;≡\; a ⊔ b \;⊑\; c$ |                     | $c ⊑ a \,∧\, c ⊑ b \;≡\; c \;⊑\; a ⊓ b$ |

The operations act as providing the greatest lower bound, ‘glb’, ‘supremum’, or
‘meet’, by ⊓; and the least upper bound, ‘lub’, ‘infimum’, or ‘join’, by ⊔.

# \hfill{\color{grey}(8.6)}}

#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \newunicodechar{□}{\ensuremath{\square}}

#+latex: \vspace{0em}
Let $□$ be one of $⊓$ or $⊔$, then:
|                    |   |                                |   |                  |
| *Symmetry of □*      |   | *Associativity of □*             |   | *Idempotency of □* |
| $a □ b \eqs b □ a$ |   | $(a □ b) □ c \eqs a □ (b □ c)$ |   | $a □ a \eqs a$   |
|                    |   |                                |   |                  |

#
| *Zero of □*   | *Identity of □* | *Absorption*        | *Self-Distributivity of □*              |
| $a ⊔ ⊤ = ⊤$ | $a ⊔ ⊥ = a$   | $a ⊓ (b ⊔ a) = a$ | $a □ (b □ c) \;=\; (a □ b) □ (a □ c)$ |
| $a ⊓ ⊥ = ⊥$ | $a ⊓ ⊤ = a$   | $a ⊔ (b ⊓ a) = a$ |                                       |
|             |               |                   |                                       |

#
| *Weakening*           | *Induced Defs. of Inclusion*                           | *Golden Rule*                                                   |
| */ Strengthening*     | $a ⊑ b \;≡\; a ⊔ b \eqs b$                         | \hspace{-1em}$a ⊓ b \;=\; a \hspace{1.52em}\equivs b = a ⊔ b$ |
| $a \;⊑\; a ⊔ b$     | $a ⊑ b \;≡\; a ⊓ b \eqs a$                         | \hspace{-1em}$a ⊓ b \;=\; a ⊔ b \equivs a = b$                |
| $a ⊓ b \;⊑\; a$     |                                                      | \hspace{-1em}$a ⊔ b \;⊑\; a ⊓ b \equivs a = b$                |
| $a ⊓ b \;⊑\; a ⊔ b$ | *Monotonicity of □*                                    |                                                               |
|                     | $a ⊑ b \,∧\, c ⊑ d \;\,⇒\,\; a □ c \;⊑\; b □ d$ |                                                               |

# Weakening/Strengthening :: $a ⊔ (b ⊓ c) \;⊑\; a ⊔ b$ and $a ⊓ b \;⊑\; a ⊓ (b ⊔
# c)$
# Both follow from monotonicity

# \hfill{\color{grey}(7.9)

The following four properties are all equivalent:
#+latex: \vspace{-0.8em}
| ⊓-Selective :: $∀ a, b \;•\; a ⊓ b = a \,∨\, a ⊓ b = a$ | ⊔-Selective :: $∀ a, b \;•\; a ⊔ b = a \,∨\, a ⊔ b = a$ |
| Linearity :: $∀ a, b \;•\; a ⊑ b \,∨\, b ⊑ a$           | Order Complement ::  $¬ (a ⊑ b) \;≡\; b ⊏ a$            |

#+BEGIN_EXPORT latex
{\small \textbf{Duality Principle:} \\
If a statement $S$ is a theorem, then so is
$S[(⊑, ⊓, ⊔, ⊤, ⊥) := (⊒, ⊔, ⊓, ⊥, ⊤)]$}.
#+END_EXPORT

* newpage                                                            :ignore:
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-newpage
  :END:
\newpage
* Conditionals

#+latex: \def\IF#1#2#3{\mathsf{if}\, #1 \,\mathsf{then}\, #2\, \mathsf{else}\, #3\, \mathsf{fi}}

“If to ∧” may be taken as axiom from which we may prove the remaining
‘alternative definitions’ “if to ⋯”.

# |            |                                                                          |
# | *if to ∧*    | $P[z ≔ \IF{b}{x}{y}] \quad≡\quad (b ⇒ P[z ≔ x]) \;∧\; (¬ b ⇒ P[z := x])$ |
# | *if to ≢*    | $P[z ≔ \IF{b}{x}{y}] \quad≡\quad \,b ∧ P[z ≔ x] \,\;≢\; ¬ b ∧ P[z := x]$ |
# | *if to ∨*    | $P[z ≔ \IF{b}{x}{y}] \quad≡\quad (b ∧ P[z ≔ x]) \;∨\; (¬ b ∧ P[z := x])$ |
# | *if to ≡*    | $P[z ≔ \IF{b}{x}{y}] \quad≡\quad b ⇒ P[z ≔ x] \;≡\; ¬ b ⇒ P[z := x]$     |
#

#+latex: \vspace{-1em}
#+begin_export latex
\begin{align*}
   \textbf{if to ∧}\qquad   & P[z ≔ \IF{b}{x}{y}] & \;≡\quad & (b   \;⇒\;     P[z ≔ x]) &\!\!∧\;\;&  (¬ b    \;⇒\; P[z := x])
\\ \textbf{if to ∨}\qquad   & P[z ≔ \IF{b}{x}{y}] & \;≡\quad & (b   \;\,∧\;\; P[z ≔ x]) &\!\!∨\;\;&  (¬ b    \,\;∧\;\; P[z := x])
\\ \textbf{if to ≢}\qquad   & P[z ≔ \IF{b}{x}{y}] & \;≡\quad & \;b  \;\;∧\;\; P[z ≔ x]  &\!\!≢\;\;&  \;\,¬ b \,\;∧\;\; P[z := x]
\\ \textbf{if to ≡}\qquad   & P[z ≔ \IF{b}{x}{y}] & \;≡\quad &  \,\,b \,\,⇒\; P[z ≔ x]  &\!\!≡\;\;&  \;\,¬ b \;⇒\; P[z := x]
\end{align*}
#+end_export

| Note that the “≡” and “≢” rules can be parsed in multiple ways    |
| since ‘≡’ is   associative, and ‘≡’ mutually associates with ‘≢’. |


#
|            |                                                                          |
| *if true*    | $\IF{\true}{x}{y} \;=\; x$                                               |
| *if false*   | $\IF{\false}{x}{y} \;=\; y$                                              |
| *then true*  | $\IF{R}{\true}{P} \;=\; R ∨ P$                                           |
| *then false* | $\IF{R}{\false}{P} \;=\; ¬ R ∧ P$                                        |
| *else true*  | $\IF{R}{P}{\true} \;=\; R ⇒ P$                                           |
| *else false* | $\IF{R}{P}{\false} \;=\; R ∧ P$                                          |
|            |                                                                          |
# line break
| *if swap*                | $\IF{b}{x}{y} \;=\; \IF{¬b}{y}{x}$                        |
| *if idempotency*         | $\IF{b}{x}{x} \;=\; x$                                    |
|                        |                                                           |
| *if guard strengthening* | $\IF{b}{x}{y} \;=\; \IF{b ∧ x ≠ y}{x}{y}$                 |
| *if Context*             | $\IF{b}{E}{F} \;=\; \IF{b}{E[b ≔ \true]}{F[b ≔ \false]}$  |
|                        |                                                           |
| *if Distributivity*      | $P[z ≔ \IF{b}{x}{y}] \,=\, \IF{b}{P[z ≔ x]}{P[z ≔ y]}$    |
|                        |                                                           |
| *if junctivity*          | $\quad \big(\IF{b}{x}{y}\big) ⊕ \big(\IF{b}{x′}{y′}\big)$ |
|                        | $= \IF{b}{(x ⊕ x′)}{(y ⊕ y′)}$                            |


  :Too_much_and_not_too_helpful__just_units:
  \begin{align*}
  & \IF{b}{E}{F}
  \\ \;=\; & \IF{b}{E[b ≔ \true]}{F[b ≔ \false]}
  \\ = & \IF{b}{E ∧ b}{F}
  \\ = & \IF{b}{E}{F ∧ ¬ b}
  \\ = & \IF{b}{b ⇒ E}{F}
  \\ = & \IF{b}{E}{F ∨ b}
  \\ = & \IF{b}{E ≡ b}{F}
  \\ = & \IF{b}{E}{F ≢ b}
  \end{align*}
  :End:

# \columnbreak

* Quantification

#+latex_header: \def\Id{\mathsf{Id}}

Let ~_⊕_~ be an associative and symmetric operation with identity $\Id$.

| *Abbreviation*           | $(⊕ x • P) = (⊕ x ❙ \true • P)$                     |
| *Empty range*            | $(⊕ x ❙ \false • P) = \Id$                          |
| *One-point rule*         | $(⊕ x ❙ x = E • P) = P[x ≔ E]$                      |
| *Distributivity*         | $(⊕ x ❙ R • P ⊕ Q) = (⊕ x ❙ R • P) ⊕ (⊕ x ❙ R • Q)$ |
| *Nesting*                | $(⊕x, y ❙ X ∧ Y • P) = (⊕ x ❙ X • (⊕ y ❙ Y • P))$   |
| *Dummy renaming*         | $(⊕ x ❙ R • P) = (⊕ y ❙ R[x ≔ y] • P[x ≔ y])$       |
|                        |                                                     |
| *Disjoint Range split*   | $(⊕ x ❙ R ∨ S • P) = (⊕ x ❙ R • P) ⊕ (⊕ x ❙ S • Q)$ |
|                        | /provided/ $R ∧ S ≡ \false$                           |
|                        |                                                     |
| *Range split*            | $\qquad (⊕ x ❙ R ∨ S • P) ⊕ (⊕ x ❙ R ∧ S • P)$      |
|                        | $= \quad (⊕ x ❙ R • P) ⊕ (⊕ x ❙ S • Q)$             |
|                        |                                                     |
| *Idempotent Range split* | $(⊕ x ❙ R ∨ S • P) = (⊕ x ❙ R • P) ⊕ (⊕ x ❙ S • Q)$ |
|                        | /provided/ ⊕ is idempotent                            |

\columnbreak
* Set Theory

#+latex_header: \usepackage{sansmath}
#+latex_header: \newunicodechar{♯}{\raisebox{.3ex}{\tiny \text{\#}}}
#+latex_header_extra: \newunicodechar{⇨}{\ensuremath{ \rightarrowtriangle }}
#+latex_header: \newunicodechar{∼}{\raisebox{.3ex}{\tiny \ensuremath{\sim}}} % \~ via Agda input

The set theoretic symbols ∈, =, ⊆, are defined as follows.

*Axiom, Set Membership:*
$F ∈ \{x ❙ R • E\} \quad≡\quad (∃ x ❙ R • F = E)$

*Axiom, Extensionality:*
$S = T \quad≡\quad (∀ x • x ∈ S ≡ x ∈ T)$

*Axiom, Subset:*
$S ⊆ T \quad≡\quad (∀ x • x ∈ S ⇒ x ∈ T)$

As witnessed by the following definitions, it is the ∈ relation that /translates
set theory to propositional logic/.

| *Universe*         | $x ∈ 𝑼$     | \quad≡\quad | $true$          |
| *Empty set*        | $x ∈ ∅$     | \quad≡\quad | $false$         |
| *Complement*       | $x ∈ ∼ S$   | \quad≡\quad | $x ∉ S$         |
| *Union*            | $x ∈ S ∪ T$ | \quad≡\quad | $x ∈ S ∨ x ∈ T$ |
| *Intersection*     | $x ∈ S ∩ T$ | \quad≡\quad | $x ∈ S ∧ x ∈ T$ |
| *PseudoComplement* | $x ∈ S ⇨ T$ | \quad≡\quad | $x ∈ S ⇒ x ∈ T$ |
| *Difference*       | $x ∈ S - T$ | \quad≡\quad | $x ∈ S ∧ x ∉ T$ |
| *Power set*        | $S ∈ ℙ T$   | \quad≡\quad | $S ⊆ T$         |

The pairs ∅|false, 𝑼|true, ∪|∨, ∩|∧, ⊆|⇒, ∼|¬ are related by ∈ and so all
equational theorems of propositional logic also hold for set theory ---indeed,
that is because both are Boolean algebras.
\newline
→ Set difference is a residual wrt ∪, and so satisfies the division properties below.
\newline
→ Subset is an order and so satisfies the aforementioned order properties.
It is bounded below by ∅ and above by 𝑼.

The relationship between set comprehension and quantifier notation is:
| *Set comprehension as union* |   | $\{x ❙ R • P\} \quad=\quad (∪ x ❙ R • \{P\})$ |
| *Membership as inclusion*    |   | $x ∈ S \quad≡\quad \{x\} ⊆ S$                 |
| *Equality as membership*     |   | $x = y \quad≡\quad x ∈ \{y\}$                 |

# (11.69) $(∃ x ❙ x ∈ S • x ∉ T) ⇒ S ≠ T$.
#
# *# Theorem (11.7) “Simple Membership”:*
# \newline   /e ∈ { x ❙ P }  ≡ P[x ≔ e]/
#
# *# Theorem (11.6) “Mathematical formulation of set comprehension”:*
# \newline     /{x ❙ P • E } = { y ❙ (∃ x ❙ P • y = E) }/
#
# Equality as membership: x = y ≡ x ∈ {y}
# Membership as subset:   x ∈ y ≡ {x} ⊆ y

* Combinatorics

#+latex: {\color{white}.}\vspace{-1em}
  | *Axiom, Size:*     | $♯S = (Σ x ❙ x ∈ S • 1)$           |
  | *Axiom, Interval:* | $m..n \;=\; \{x : ℤ ❙ m ≤ x ≤ n\}$ |

The following theorems serve to define ‘♯’ for the usual set theory operators.

|                                  |                                             |
| *Positive definite*                | $♯S ⊆ 0 \quad≡\quad S = ∅$                  |
| *Power set size*                   | $♯ ℙ S = 2^{♯S}$                            |
| *Principle of Inclusion-Exclusion* | $♯(S ∪ T) = ♯S + ♯T - ♯(S ∩ T)$             |
| *Monotonicity*                     | $S ⊆ T ⇒ ♯S ≤ ♯T$                           |
| *Difference rule*                  | $S ⊆ T ⇒ ♯(T - S) = ♯T - ♯S$                |
| *Complement size*                  | $♯(∼ S) = ♯𝑼 - ♯S$                       |
| *Range size*                       | $(Σ x : 𝑼 ❙ x ∉ S • 1) \;=\; ♯𝑼 - ♯S$       |
| *Interval size*                    | $♯(m..n) \;=\; n - m + 1\;$ for $\;m ≤ n$   |
| *Pigeonhole Principle*             | $(Σ i : 1..n • E)/n \;≤\; (↑ i : 1..n • E)$ |
| ( /“min ≤ avg ≤ max”/ )            | $(↓ i : 1..n • E) ≤ (Σ i : 1..n • E)/n$     |

**Rule of sum:**
$♯(∪ i ❙ R\, i • P) \;=\; (Σ i ❙ R\, i • ♯P)$
\newline provided the range is pairwise disjoint:
$∀ i,j • R\, i ∧ R\, j ≡ i = j$.

*Rule of product:*
$♯(\times i ❙ R\, i • P) \;=\; (Π i ❙ R\, i • ♯P)$

# \newpage

* COMMENT τⁿ
Let $τⁿ$ denote the sequences of elements of type
τ of length $n$; i.e., the functions $1..n → τ$.

#+latex: \def\distinct{\mathsf{distinct}\,}

Let $\distinct s \;≡\; (∀ i, j : 1..n • s\, i = s\, j ≡ i = j)$.

*Axiom, Permutation:*
$P(n, r) \;=\; (Σ s : (1..n)^r ❙ \distinct s • 1)$

*Theorem, Permutation:*
$P(n, r) \;=\; n! / (n - r)!$

*Theorem, Permutations with repetition:*
$(Σ s : (1..n)^r • 1) \;=\; n^r$

*Axiom, Combination:*
$\binom{n}{r} \;=\; (Σ s : ℙ 1..n ❙ ♯s = r • 1)$

*Theorem, Combination:*
$\binom{n}{r} \;=\; n! / (r! · (n - r)!)$

* Converse ---an over-approximation of inverse (A4)

#+latex_header: \newunicodechar{˘}{\raise0.5ex\hbox{\tiny$\smallsmile$}}
#+latex_header: \def\fcmp{\mathop{\fatsemi}}
#+latex_header: \newunicodechar{⨾}{\ensuremath{\fcmp}}

#+latex: {\color{white}.}\vspace{-1em}

# Axioms,
| *Co-distributivity*     | *˘˘, Involutive* | *Monotonicity*        |
| $(x ⨾ y) ˘ = y ˘ ⨾ x$ | $x ˘ ˘ = x$    | $x ⊑ y ⇒ x ˘ ⊑ y ˘$ |

# Theorems,

| *Identity*      | *Isotonicity* | *Connection*              | *Elimination*             |
| $\Id ˘ = \Id$ | $x ⊑ y \;≡\; x ˘ ⊑ y ˘$            | $a ˘ ⊑ b \;≡\; a ⊑ b ˘$ | $x ˘ = y ˘ \;≡\; x = y$ |

* Residuals, Division
#+begin_export latex
\def\univalent{\mathsf{univalent}\,}
\def\surjective{\mathsf{surjective}\,}
\def\total{\mathsf{total}\,}
\def\injective{\mathsf{injective}\,}
\def\mapping{\mathsf{mapping}\,}
\def\bijective{\mathsf{bijective}\,}
\def\iso{\mathsf{iso}\,}
#+end_export

# + latex_header: \newunicodechar{╱}

Suppose we have an associative operation ~_⨾_~ with identity $\Id$ and two
operations “under ╲” and “over ╱” specified as follows.

|                                   |   |                                   |
| *Characterisation of ╱*             |   | *Characterisation of ╲*             |
| $a ⨾ b ⊑ c \quad≡\quad a ⊑ c ╱ b$ |   | $a ⨾ b ⊑ c \quad≡\quad b ⊑ a ╲ c$ |

#+latex: {\remark{When ⨾ is symmetric, as in the special cases $⨾ = ⊓$, the divisions coincide: $x ╱ y \;=\; y ╲ x$.}}

#
|                       |                                 |   |                                 |
| *Cancellation*          | $(a ╱ b) ⨾ b ⊑ a$               |   | $a ⨾ (a ╲ b) ⊑ b$               |
| *Dividing a division*   | $(a ╱ b) ╱ c \;=\; a ╱ (c ⨾ b)$ |   | $a ╲ (b ╲ c) \;=\; (b ⨾ a) ╲ c$ |
| *Division of multiples* | $a ⊑ (a ⨾ b) ╱ b$               |   | $b ⊑ a ╲ (a ⨾ b)$               |
|                       |                                 |   |                                 |
#

| *Monotonicity of ⨾*             | $a ⊑ a′ ∧ b ⊑ b′ ⇒ a ⨾ b ⊑ a′ ⨾ b′$ |
| *Subdistributivity of ⨾ over ⊓* | $a ⨾ (b ⊓ c) \;⊏\; a ⨾ b ⊓ a ⨾ c$   |

:Subdist_pf:
a ⨾ (b ⊓ c)
= a ⨾ (b ⊓ c)  ⊓ a ⨾ (b ⊓ c)   -- ⊓ idemp
⊏ a ⨾ b  ⊓  a ⨾ c              -- monotonicity of ⨾ and weakening x ⊓ y ⊏ x
:End:

#
|                          |                           | |                            |
| *Numerator monotonicity*   | $b ⊑ b′ ⇒ a ╲ b ⊑ a ╲ b′$ | | $b ⊑ b′  ⇒ b ╱ a ⊑ b′ ╱ a$ |
| *Denominator antitonicity* | $a′ ⊑ a ⇒ a ╲ b ⊑ a′ ╲ b$ | | $a′ ⊑ a  ⇒ b ╱ a ⊑ b ╱ a′$ |
# | *Self-reflexivity*         | $\Id ⊑ a ╲ a$             | $\Id ⊑ a ╱ a$              |
# | *Denominator Identity*     | $\Id ╲ a = a$             | $a ╱ \Id = a$              |
# | *Numerator Zero*           | $a ╲ ⊤ = ⊤$               | $⊤ ╱ a = ⊤$                |
# | *Wraparound rule*          | $⊥ ╲ a = ⊤$               | $a ╱ ⊥ = ⊤$                |
| *Exact division* | $(∃ z • y = x ⨾ z)$ | ≡ | $x ⨾ (x ╲ y) = y$ |
| *Exact division* | $(∃ z • y = x ╲ z)$ | ≡ | $x ╲ (x ⨾ y) = y$ |

# The next set of rules dicate how we can distribute a meet into a division.
*Modal and Dedekind rules:*
# Taking a ≔ a ˘ in the left side rules makes them look more like the right side
# rules (•̀ᴗ•́)و
| \remark{ (Axioms) }                         |   | \remark{ (Theorems) }                     |
| $a ⨾ b ⊓ c \;⊑\; a ⨾ (b ⊓ a ˘ ⨾ c)$         |   | $a ╲ b ⊓ c \;⊑\; a ╲ (b ⊓ a ⨾ c)$         |
| $a ⨾ b ⊓ c \;⊑\; (a ⊓ c ⨾ b ˘) ⨾ b$         |   | $a ╲ b ⊓ c \;⊑\; (a ⊓ c ╲ b) ╲ b$         |
| $a ⨾ b ⊓ c \;⊑\; (a ⊓ c ⨾ b˘)⨾(b ⊓ a˘ ⨾ c)$ |   | $a ╲ b ⊓ c \;⊑\; (a ⊓ c ╲ b)╲(b ⊓ a ⨾ c)$ |

# In the presence of complements, Dedekind ⇔ Schroder Equivalences ⇔ Division
# characterisations (•̀ᴗ•́)و

#+latex: \vspace{0.5em}

Division for the special case $⨾ = ⊓$ is known /the relative pseudo-complement/:
Denoted $x \rightarrowtriangle y$ (/“x implies y”/), it is /the largest piece
‘outside’ of x that is still included in y/.  The relative pseudocomplement
/internalises inclusion/, $z ⊑ (x ⇨ y) \;⇒\; \big(z ⊑ x ⇒ z ⊑ y\big)$; more
generally: $x ⊑ y \;≡\; \Id ⊑ x ╲ y$.

:Proof:
(⇒)
  z ⊑ x ⇨ y  ∧  z ⊑ x
≡ z ⊓ x ⊑ y  ∧  z ⊓ x = z
⇒ z ⊑ y

What about (⇐), is that true?

-   z ⊑ (x ⇨ y) ≡ z ⊑ x ⇒ z ⊑ y

Maybe not.
:End:

# a ⇨ b is the largest value that along with ‘a’ leads to ‘b’; ie it allows
# modus ponens.

# The rules that define ⇨ and - are “shunting rules”: We shunt
# a (for ⇨) to the right, and shunt b (for -) to the right.

#+latex: \vspace{0.7em}
| Pseudo-complement           | Semi-complement               |
| $x ⊓ a ⊑ b \;≡\; x ⊑ a ⇨ b$ | $a - b ⊑ x  \;≡\;  a ⊑ b ⊔ x$ |
|                             |                               |
| Strong modus ponens         | Absorption                    |
| $a ⊓ (a ⇨ b) \;=\; a ⊓ b$   | $(x ⊔ b) - b \;=\; x - b$     |
| $a ⇨ (x ⊓ a) \;=\; a ⇨ x$   | $(a - b) ⊔ b \;=\; a ⊔ b$     |

# Ones on left are by indirect inclusion from below (since we're working with meets)
# and the rights are proven by indirect inclsuion from above (since we're working
# with joins) (•̀ᴗ•́)و

# Taking b ≔ ⊥ in the top left give us the “disjointness” requirement of
# complements;
# Taking a ≔ ⊤ in the bot right gives us the “exhaustivness” requirement of
# complements.

# pseudo-complement:  x ⊑ a ⇒ b  ≡  x ⊓ a ⊑ b

# semi-complement:    a - b ⊑ x ≡   a ⊑ x ⊔ b

Division for the special case $⨾ = ⊔$ in the /dual order/ (⊒) is known as /the
difference/ or /relative semi-complement/: Denoted $x - y$ (/“x without y”/), it is /the
smallest piece that along with y ‘covers’ x/; i.e., it is the least value that
‘complements’ (“fill up together”) $y$ to include $x$.
#+latex: {\remark{( Possibly for this reason, set difference is sometimes denoted $S ╲ T$ in other books! )}}
#
# # semi-complement:    x ⊔ b ⊒ a  ≡  x ⊒ a - b

# Semi-complements and psueod-complements let us treat meets and joins with “the
# other” inclusions; e.g., ⊔ appears on the lower side of ⊑ in ⊔-char, but ⊔ may
# appear on the greater side of ⊑ in ‘-’-char.

# In a Boolean lattice,  a - b  =  ¬ a ⊓ b  and  a ⇨ b  =  ¬ a ⊔ b

\columnbreak

# +latex: \vspace{-5cm}

** COMMENT Residuals are stronger than converse

 With residuals, we can prove modal rules

 whereas with modal rules we cannot generally produce residuals ---which
 secretly hide negations ;-)

* Named Properties

#+begin_export  latex
\def\refl{\mathsf{reflexive}\,}
\def\irrefl{\mathsf{irreflexive}\,}
\def\sym{\mathsf{symmetric}\,}
\def\antisym{\mathsf{antisymmetric}\,}
\def\asym{\mathsf{asymmetric}\,}
\def\trans{\mathsf{transitive}\,}
\def\idemp{\mathsf{idempotent}\,}
#+end_export

#+begin_2parallel

| $\refl$   | $x$ | ≡ | $\Id ⊑ x$     |
| $\irrefl$ | $x$ | ≡ | $\Id ⊓ x = ⊥$ |
| $\trans$  | $x$ | ≡ | $x ⨾ x ⊑ x$   |
| $\idemp$  | $x$ | ≡ | $x ⨾ x = x$   |

#+latex: \columnbreak \vspace{-1cm}

| $\sym$     | $x$ | ≡ | $x ˘ = x$       |
| $\antisym$ | $x$ | ≡ | $x ⊓ x ˘ ⊑ \Id$ |
| $\asym$    | $x$ | ≡ | $x ⊓ x ˘ = ⊥$   |

#+end_2parallel

:Equivs_and_orders:
$R$ is an \textbf{equivalence (relation) on $B$} iff it is reflexive,
transitive, and
symmetric.

$R$ is a \textbf{(partial) order on $B$} iff it is reflexive, transitive, and\\\hfill
antisymmetric.

$R$ is a \textbf{strict-order on $B$} iff it is irreflexive, transitive, and
asymmetric.
:End:

The above properties are preserved by converse: Let $P$ be any of the above
properties, then $P \, x \;≡\; P (x ˘)$.

#
# | ⋆ ⋆ ⋆  |
#


| /            |     |   |                                 | <             |     |   |                                    |
| $\univalent$ | $x$ | ≡ | $x ˘ ⨾ x ⊑ \Id$                 | $\injective$  | $x$ | ≡ | $x ⨾ x ˘ ⊑ \Id$                    |
| $\total$     | $x$ | ≡ | $\Id ⊑ x ⨾ x ˘$                 | $\surjective$ | $x$ | ≡ | $\Id ⊑ x ˘ ⨾ x$                    |
| $\mapping$   | $x$ | ≡ | $\total x \;∧\; \univalent x$   | $\bijective$  | $x$ | ≡ | $\surjective x \;∧\; \injective x$ |
| $\iso$       | $x$ | ≡ | $\mapping x \;∧\; \bijective x$ |               |     |   |                                    |


# :columnbreak:

#
#+latex: \vspace{1em}

#+begin_parallel

| *Duality theorems*                                                    |
|                                                                     |
| $\univalent(x ˘)               \quad ≡ \quad \injective \hspace{0.5em} x$   |
| $\total \hspace{1.8em}   (x ˘) \quad ≡ \quad \surjective  x$         |
| $\mapping \,(x ˘)              \quad ≡ \quad \bijective \hspace{0.4em} x$         |
| $\iso \hspace{2.6em}(x ˘)      \quad ≡ \quad \iso \hspace{2.7em} x$ |

#+latex: \vspace{1em}

| *Invertiblility theorems*                                        |
|                                                                |
| $\total x ∧ \injective x ⇒ x ⨾ x ˘ = \Id$                      |
| $\iso x \quad≡\quad x ⨾ x˘ = \Id \;∧\; x ˘ ⨾ x = \Id$          |
| $\iso x \quad⇒\quad (\exists g \bullet\; x ⨾ g = \Id = g ⨾ x)$ |

#+end_parallel

# *Division

#+latex: \vspace{1em}

*Shunting laws:*
| $\univalent f$ | ⇒ | $(x ⨾ f ⊑ y  ⇐  x ⊑ y ⨾ f ˘ )$  |
| $\total f$     | ⇒ | $(x ⨾ f ⊑ y  \;⇒\;  x ⊑ y ⨾ f ˘ )$ |
| $\mapping f$   | ⇒ | $( x ⨾ f ⊑ y  \;≡\;\,  x ⊑ y ⨾ f ˘ )$   |

* Relations

# From CalcCheckStyle
#+latex_header: \usepackage{lapdf}
#+begin_export latex
\newcommand\lbtsbrak{%
%% %    \tikz[line cap=round,x=1ex,y=1ex,line width=0.8pt]
%%     \tikz[x=1ex,y=1ex,line width=1.1pt]
%%     {\draw (0.6,2) -- (0.0,1.5) -- (0.0,0.5) -- (0.6,0.0);}%
{\unitlength1ex%
\begin{lapdf}(0.25,2)(-0.05,-0.3)
  %\Setwidth(0.02) \Setcap(1) \Setdash([] 0) \Setjoin(1)}
  \Setwidth(0.3)
  \Setcap(2)
  \Setjoin(2)
  \Moveto(0.6,1.9)
  \Lineto(0,1.4)
  \Lineto(0,0.4)
  \Lineto(0.6,-0.1)
  %\Closepath
  %\Polyline(0.6,2)(0,1.5)(0,0.5)(0.6,0)
  \Stroke
\end{lapdf}}
}

\newcommand\rbtsbrak{%
%% %    \tikz[line cap=round,x=1ex,y=1ex,line width=0.8pt]
%%     \tikz[x=1ex,y=1ex,line width=1.1pt]
%%     {\draw (0.0,2) -- (0.6,1.5) -- (0.6,0.5) -- (0.0,0.0);}%
{\unitlength1ex%
\begin{lapdf}(0.25,2)(-0.35,-0.3)
  \Setwidth(0.3)
  \Setcap(2)
  \Setjoin(2)
  \Moveto(0.0,1.9)
  \Lineto(0.6,1.4)
  \Lineto(0.6,0.4)
  \Lineto(0.0,-0.1)
  %\Polyline(0,2)(0.6,1.5)(0.6,0.5)(0,0)
  \Stroke
\end{lapdf}}
}

\def\LRelRaw{\lower0.4ex\hbox{\lbtsbrak}}
\def\RRelRaw{\lower0.4ex\hbox{\rbtsbrak}}
\def\LRel{\kern0.3em\LRelRaw\kern0.2em}
\def\RRel{\kern0.2em\RRelRaw\kern0.3em}
\def\infixREL#1{\LRel #1 \RRel}

% a \infixREL{R} b
#+end_export

#+latex_header: \newunicodechar{〔}{\ensuremath{\LRel}}
#+latex_header: \newunicodechar{〕}{\ensuremath{\RRel}}

Relations are sets of pairs ...

# Translating between Relation Algebra and Predicate Logic

# RA and PL
# The Axioms of Set Theory --- Applied to Binary Relations
#+latex: \vspace{-0.7em}
|                  |                                  |   |                                                   |
| Tortoise         | $x 〔 R 〕 y$                    | ≡ | $⟨x, y⟩ ∈ R$                                      |
| Extensionality   | $R = S$                          | ≡ | $(\forall\ x,y \;•\;  x〔 R〕y \equiv x〔S〕y)$   |
| Inclusion        | $R \subseteq S$                  | ≡ | $(\forall\ x,y \;•\;  x 〔R〕y \implies x〔S〕y)$ |
| Empty            | $u 〔\emptyset〕 v$              | ≡ | $\false$                                          |
| Universe         | $u 〔A \times B〕 v$             | ≡ | $u \in A \;\land\; v \in B$                       |
| Complement       | $u 〔∼ S〕 v$                    | ≡ | $\lnot (u 〔S〕 v)$                               |
| Union            | $u 〔S ∪ T〕 v$                  | ≡ | $u 〔S〕 v \;\lor\; u〔T〕v$                      |
| Intersection     | $u〔S ∩ T〕v$                    | ≡ | $u〔S〕 v \;\land\; u〔T〕v$                      |
| Difference       | $u〔S - T〕 v$                   | ≡ | $u〔S〕v \;\land\; \lnot(u〔T〕v)$                |
| PseudoComplement | $u〔S \rightarrowtriangle T〕 v$ | ≡ | $u〔S〕v \;\implies\; u〔T〕v$                    |
| /An/ Identity      | $u 〔𝕀 \ A〕 \, v$               | ≡ | $u = v \in A$                                     |
| /The/ Identity     | $u 〔\Id〕 \, v$                 | ≡ | $u = v$                                           |
| Converse         | $u〔 R˘〕 v$                     | ≡ | $v〔 R〕 u$                                       |
| Composition      | $u〔R \fcmp S〕 v$               | ≡ | $(\exists\ x \;•\;\;  u〔R〕x \;\land\; x〔S〕v)$ |
| Under Division   | $u 〔 S ╲ R 〕 v$                 | ≡ | $(∀ x • x 〔S〕 u  ⇒  x  〔R〕 v)$                |
| Over Division    | $u 〔 R ╱ S 〕 v$                  | ≡ | $(∀ y • v 〔S〕 y  ⇒  u 〔R〕 y)$                       |

# R╲S “right residual”

:Hide:
/“Residuals arise from negating compositions”:/ By comparing symbol-by-symbol in
the RHS of ‘⨾’ and ‘╱’, it is not difficult to see that $S ╱ R \;\;=\;\;
∼\big(R ⨾ ∼ S ˘\big)˘ \;\;=\;\; ∼\big(∼ S ⨾ R ˘\big)$ ---note
$\big(∼ T\big)˘ \;=\; ∼ \big(T ˘\big)$.
:End:

# S╱R = ¬(¬S ⨾ R˘)
# R╲S = ¬(R˘ ⨾ ¬S)

#+latex: \def\E{\mathsf{E}}
*Example:* Define $x 〔\E〕 X \;≡\; x ∈ X$, then $A 〔\E ╲ \E〕B \;≡\; A ⊆ B$.
# Likewise, $X 〔\E ╲ \E \,∩\, ∼ \E ˘ ╱ ∼ \E ˘ 〕 Y \;≡\; Y = ∼ X$.
# i.e., a symmetric quotient! Relationships of equalities are syqs!

#+latex: \vspace{-0.7em}
#+latex: \def\L{\mathsf{L}}
*Example (Indirect inclusion):*
Define $x 〔\L〕 y \;≡\; x ⊑ y$, then $\L ╲ \L = \L ╱ \L = \L$.

:identity_rel:
The identity relation on \ $B : \SET {t}$ \;
  is \  $\;\relId\ {B} \; :\; t \rel t$:

 $\;\relId\ {B} \; =\; \{ x : t \with x \in B \spot \langle x , x
  \rangle \}$:

$x \infixREL{\relId\ {B}}\ y \quad\equiv\quad x = y \in B$
:end:
:universe_rel:
The {universal relation} on $\; B \times C\;$ is $\;B \times C$
$x\ \infixREL{B \times C}\ y \quad\equiv\quad x \in B \land y \in C$
ie
$\langle x, y \rangle \ \in\ B \times C \quad\equiv\quad x \in B \land y \in C$
:End:

* newpage :ignore:
#+latex: \newpage

* Interpreting Named Properties

We will interpret the named properties using
- Relations: Formulae on sets of pairs; “ $\forall x • …$ ”
- Graphs: Dots and lines on a page
- Matrices: 1s and 0s on a grid
- Programs: Transformations of inputs to outputs

# space
|   |


#+latex: \vspace{2.1cm}
* Properties of a relationship flavour

| $\refl$    | $R$ | ≡ | $(\forall\ b  \;•\; b\infixREL{R}b )$                                                          |
|            |     |   | \remark{Every node in a graph has a ‘loop’, a line to itself}                                  |
|            |     |   | \remark{(Thus, paths can always be increased in length: $R ⊆ R⨾R$)}                            |
|            |     |   | \remark{The diagonal of a matrix is all 1s}                                                    |
|            |     |   |                                                                                                |
| $\irrefl$  | $R$ | ≡ | $(\forall\ b  \;•\; \lnot (b\infixREL{R}b ))$                                                  |
|            |     |   | \remark{No node in a graph has a loop}                                                         |
|            |     |   | \remark{The diagonal of a matrix is all 0s}                                                    |
|            |     |   |                                                                                                |
| $\sym$     | $R$ | ≡ | $(\forall\ b, c  \;•\; b\infixREL{R}c \equiv c\infixREL{R}b )$                                 |
|            |     |   | \remark{The graph is undirected; we have a symmetric matrix}                                   |
|            |     |   |                                                                                                |
| $\antisym$ | $R$ | ≡ | $(\forall\ b, c  \;•\; b\infixREL{R}c \land c\infixREL{R}b \;\implies\; b = c )$               |
|            |     |   | \remark{Mutually related nodes are necessairly self-loops}                                     |
|            |     |   | \remark{“Mutually related items are necessairly indistinguishable”}                            |
|            |     |   |                                                                                                |
| $\asym$    | $R$ | ≡ | $(\forall\ b, c  \;•\; b\infixREL{R}c \;\implies\; \lnot ( c\infixREL{R}b ) )$                 |
|            |     |   | @@latex:\remark{\hspace{-.0em}At most 1 edge (regardless of direction) relating any 2 nodes}@@ |
|            |     |   |                                                                                                |
| $\trans$   | $R$ | ≡ | $(\forall b, c, d \;•\; b\infixREL{R}c\infixREL{R}d \;\implies\; b\infixREL{R}d)$              |
|            |     |   | \remark{Paths can always be shortened (but nonempty)}                                          |
|            |     |   |                                                                                                |
| $\idemp$   | $R$ | ≡ | \remark{Lengths of paths can be changed arbitrarily (nonzero)}                                 |
|            |     |   |                                                                                                |

# | trans              |     |   | \remark{In the graph, any 2-step path can be replaced with a 1-step path}                 |

#+latex: \vfill
/Intuitively/, by considering the interpretations only, we find
\[\refl R \;∧\; \trans R \;⇒\; \idemp R\] Super cool stuff!


#+latex: \vfill{\color{white}.}\columnbreak
* /“Relations are simple graphs”/

Relations directly represent /simple graphs/: Dots (/nodes/) and at most 1 line
(/edge/) between any two.  E.g., cities and highways
#+latex: {\color{grey!80} (ignoring multiple highways)}.
# In a simple graph, no two edges have the same source and the same target. (No
#  “parallel edges”.)

Treating $R$ as a graph:
|                    |                                                                          |
| $R$                | A bunch of dots on a page and an arrow from $x$ to $y$ when $x 〔 R 〕y$ |
| $R˘$               | Flip the arrows in the graph                                             |
| $\mathsf{Dom}\, R$ | The nodes that have an outgoing edge                                     |
| $\mathsf{Ran}\, R$ | The nodes that have an incoming edge                                     |
| $x 〔R〕y$         | A path of length 1 (an edge) from $x$ to $y$                             |
| $x 〔R ⨾ R〕 y$    | A path of length 2 from $x$ to $y$                                       |
| $R ∪ R˘$           | The associated undirected graph (“symmetric closure”)                    |
|                    |                                                                          |

* Properties of an operational flavour

| $\univalent$  | $R$ | ≡ | $(∀ b, c, c′ \;•\; b 〔R〕 c \,∧\, b 〔R〕 c′ \;⇒\; c = c′)$ \remark{---aka “partial function” } |
|               |     |   | \remark{Graph: Every node has at most one outgoing edge}                                         |
|               |     |   | \remark{Matrix: Every row has at most one 1}                                                     |
|               |     |   | \remark{Prog: The program is deterministic, same-input yields same-output}                       |
|               |     |   |                                                                                                  |
| $\injective$  | $R$ | ≡ | $(∀ b, b′, c \;•\; b 〔R〕 c \,∧\, b′ 〔R〕 c \;⇒\; b = b′)$                                     |
|               |     |   | \remark{Graph: Every node has at most one incoming edge}                                         |
|               |     |   | \remark{Matrix: Every column has at most one 1}                                                  |
|               |     |   | \remark{Prog: The program preserves distinctness (by contraposition)}                            |
|               |     |   |                                                                                                  |
| $\total$      | $R$ | ≡ | $(∀ b \;•\; ∃ c \;•\; b 〔R〕c)$                                                                 |
|               |     |   | \remark{Graph: Every node has at least one outgoing edge}                                        |
|               |     |   | \remark{Matrix: Every row has at least one 1}                                                    |
|               |     |   | \remark{Prog: The program terminates; has at least one output for each input}                    |
|               |     |   |                                                                                                  |
| $\surjective$ | $R$ | ≡ | $(∀ c \;•\; ∃ b \;•\; b 〔R〕 c)$                                                                |
|               |     |   | \remark{Graph: Every node has at least one incoming edge}                                        |
|               |     |   | \remark{Matrix: Every column has at least one 1}                                                 |
|               |     |   | \remark{Prog: All possible outputs arise from some input}                                        |
|               |     |   |                                                                                                  |
| $\mapping$    | $R$ | ≡ | $\total R \;∧\; \univalent R$ \remark{---also known as a “(total) function” }                    |
|               |     |   | \remark{Graph: Every node has exactly one outgoing edge}                                         |
|               |     |   | \remark{Matrix: Every row has exactly one 1}                                                     |
|               |     |   | \remark{Prog: The program always terminates \iffalse deterministicly\fi with a unique output}    |
|               |     |   |                                                                                                  |
| $\bijective$  | $R$ | ≡ | $\surjective R \;∧\; \injective R$                                                               |
|               |     |   | \remark{Graph: Every node has exactly one incoming edge}                                         |
|               |     |   | \remark{Matrix: Every column has exactly one 1}                                                  |
|               |     |   | \remark{Prog: Every output arises from a unique input}                                           |
|               |     |   |                                                                                                  |
| $\iso$        | $R$ | ≡ | $\mapping R \;∧\; \bijective R$                                                                  |
|               |     |   | \remark{Graph: It's a bunch of ‘circles’}                                                        |
|               |     |   | \remark{Matrix: It's a permutation; a re-arrangement of the identity matrix}                     |
|               |     |   | \remark{Prog: A non-lossy protocol associating inputs to outputs }                               |

# an iso relation treated as a simple graph is a bunch of circles:
# Any number of cycles, such that every node lies on exactly one.

* COMMENT Quantification
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Quantification
  :END:

+ Axiom, Leibniz for range ::
  /(∀ x • R ≡ R′) ⇒ (⊕ x ❙ R • P) = (⊕ x ❙ R′ • P)/

+ Axiom, Leibniz for body ::
  /(∀ x • P = P′) ⇒ (⊕ x ❙ R • P) = (⊕ x ❙ R • P′)/

+ General One-point rule ::
  | $(⊕ x ❙ R ∧ x = E • B)$ | $=$ | /if R[x ≔ E] then B[x ≔ E] else id_⊕ fi/ |

+ Maxima ::
  - z = (↑ x • f x) ≡ (∃ x • z = f x) ∧ (∀ x • f x ≤ z)
  - f z = (↑ x ❙ R x • f x) ≡ R z ∧ (∀ x ❙ R x • f x ≤ f z)
