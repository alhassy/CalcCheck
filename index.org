#+title: Calculational Mathematics and ~CalcCheck~
# +subtitle: Abrdiged Lecture Notes
#+author: Musa Al-hassy
#+options: tags:nil d:nil
#+PROPERTY: header-args:calccheck :tangle (concat (file-name-sans-extension (buffer-name)) ".calc") :comments nil

#+Description: Abrdiged Lecture Notes

# Make HTML
# (f-move (org-html-export-to-html) "~/CalcCheck/index.html")
#+HTML_HEAD: <link href="https://alhassy.github.io/org-notes-style.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/floating-toc.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/blog-banner.css" rel="stylesheet" type="text/css" />
# The last one has the styling for lists.

# $1 colour eg “pink” or “hsl(157 75% 20%)” or “#e5f5e5”; $2 title
#+macro: begin-box @@html: <div style="padding: 1em; background-color: $1; border-radius: 15px; font-size: 0.9em; box-shadow: 0.05em 0.1em 5px 0.01em  #00000057;"> <h3>$2</h3>@@

#+macro: end-box @@html: </div>@@

#+begin_center
#+include: ~/Desktop/colours_palette.html export html
#+end_center

* TODO COMMENT Books
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Books
  :END:
{{{begin-box(#E5E7E9 , hi)}}}

 *Mathematics of Program Construction*

 + Program Construction   ---
 + Ferreira's Thesis
   #+begin_quote
   The main contribution of this thesis is educational material, capturing
   calculational and algorithmic problem-solving techniques, that supports the
   teaching of mathematics and computing. The material is problem-driven, it is
   aimed at the boundary between pre-university and university level...
   #+end_quote

A list of accidents caused by computer programs can be found at “The Risks Digest” (http://catless.ncl.ac.uk/Risks )

Hoare triples and an axiomatic approach to language definition.

*Equational Logic*

 + LADM
 + [[https://fourferries.com/wp-content/uploads/2016/10/StructuredDerivation26092016.pdf][Structured Derivations: Teaching Mathematical Reasoning in High School]]

   Online and covers a variety of topics, including limits and probability
   theory.

[[https://avenue.cllmcmaster.ca/d2l/lms/links/link_newedit.d2l?ext=0&linkid=97717&ou=347775][Using Z]] (Not equational, but uses the same notation as the above books; mostly.)

Z (pronouced "Zed") is a standardised mathematical notation intended for software specification.
For universal and existential quantification, CalcCheck uses the same notation as Z.

The first half of the book "Using Z" is an introduction to logic via natural deduction, and to basic discrete mathematics covering set, functions, and relations, all in the Z notation.

*More Books*

One of the products of the attempts to streamline mathematical arguments
mentioned above is the so-called calculational method, which aims at reducing
proofs as much as possible to elementary syntactic calculation. The
calculational proof style has been adopted widely by the community of computing
scientists working on formal pro- gramming methods. For example,

- PhD thesis of Netty van Gasteren “On the shape of mathematical arguments”
  [vG90],

  :more:
Antonetta J. M. van Gasteren. On the Shape of Mathematical Arguments. Number 445 in Lecture Notes in Computer Science. Springer-Verlag, New York, NY, USA, 1990.

  One of the first problems was that mathematicians hardly manipulate their formu- lae: instead, they interpret them; and one of the reasons is that the notation they use is not adequate for manipulation.
  :end:

- PhD thesis of João F. Ferreira

 :more:
 João F. Ferreira and Alexandra Mendes. Students’ feedback on teaching
 mathematics through the calculational method. In Frontiers in Education
 Conference, 2009. FIE ’09. 39th IEEE, 2009.
 :end:

- the textbooks written by Roland Backhouse
  :more:
Roland C. Backhouse. Program Construction. Calculating Implementations
from Specifications. John Wiley & Sons, 2003.
  :end:

- by Richard Bird and Oege de Moor
  :more:
  Richard S. Bird and Oege de Moor. Algebra of Programming. Prentice-Hall International, 1996.
  :end:

- by David Gries and Fred Schneider
  :more:
  David Gries and Fred B. Schneider. A Logical Approach to Discrete
  Math. Springer-Verlag, 1993.

  David Gries and Fred B. Schneider. Teaching math more effec- tively, through
calculational proofs. The American Mathematical Monthly, 102(8):691–697, 1995.
  :end:

- Jan van de Snepscheut
  # Jan L.A. van de Snepscheut. What Computing Is All About. Springer-Verlag, 1993.

- Back et al. introduced the concept of structured derivations

  :more:

Ralph Back, Jim Grundy, and Joakim von Wright. Structured calculational proof. Technical Report TUCS-TR-65, 1996.

Ralph-Johan Back, Mia Peltomäki, Tapio Salakoski, and Joakim von Wright. Structured derivations supporting high-school mathematics. In A. Laine, J. Lavonen, and V. Meisalo, editors, Proceedings of the 20th An- nual Symposium of the Finnish Mathematics and Science Education Research Association, Research Report 253, pages 104–122, Helsinki, Finland, 2004. Department of Applied Sciences of Education, University of Helsinki.

Ralph-Johan Back and Joakim von Wright.
Doing high school mathematics carefully. Technical report, 1997.

Ralph-Johan Back and Joakim von Wright. Mathematics with a little bit of logic:
Structured derivations in high-school mathematics. 2006. Manuscript.

Ralph-Johan Back. Structured derivations as a unified proof format for teaching
mathematics. Technical Report 949, TUCS, Jul 2009.

Roland Backhouse, Wei Chen, and João Ferreira. The algorithmics of solitaire-like games. In Claude Bolduc, Jules Desharnais, and Béchir Ktari, editors, Mathematics of Program Construction, volume 6120 of Lecture Notes in Computer Science, pages 1–18. Springer-Verlag, 2010.
  :end:


resources on the calculational method
- websites
  - “E. W. Dijkstra Archive” (http://userweb.cs.utexas.edu/users/EWD)
  - “mathmeth.com – Disci- pline in Thought” (http://mathmeth.com).

Other

The project “Computer Science Unplugged” [BWF06], whose goal is to teach principles of computing science through games and puzzles. They provide a series of activity worksheets that can be directly used in the classroom.
- they want to convey general principles and ideas of computing
- Also, their material is suitable for people of all ages
- http://csunplugged.org.

Tim Bell, Ian H. Witten, and Mike Fellows. Computer Science Unplugged: An enrichment and extension programme for primary-aged children. December 2006. Available from http://csunplugged.org/index.php/en/books.

We cannot conclude this section without mentioning some of the efforts of the
mathe- matical community in articulating psychological and technical approaches
to problem solving. The best known work, and one of the major influences in
problem solving, is George Pólya’s How to Solve It. Even though other
mathematicians had considered questions of problem solving in earlier
generations, it was Pólya’s How to Solve It that had the tremendous impact on
the way people viewed the techniques of attacking mathematical problems. In
particular, it was there that Pólya suggested the division of the
problem-solving process into the now widely accepted four phases: understanding
the problem, devising a plan, carrying out the plan, and looking back. Other
works include Jacques Hadamard’s Essay on the Psychology of Invention in the
Mathematical Field, Karl Duncker’s On Problem Solving, and Max Wertheimer’s
Productive Thinking. Incidentally, all these books appeared in 1945, which led
Alan H. Schoenfeld to point out that 1945 was indeed a great year for problem
solving.

*Puzzle books*

Another trend in mathematics and problem solving — and related with the opening quote of this chapter — is based on the belief that mathematical games and recreations can be used for educational purposes and incorporated into various curricula

Raymond Smullyan!

{{{end-box}}}

* COMMENT Resources on Calculational Notation or Discrete Mathematics
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Resources-on-Calculational-Notation-or-Discrete-Mathematics
  :END:

- [[https://core.ac.uk/download/pdf/55749779.pdf][Functional Declarative Language Design and Predicate Calculus: A Practical
  Approach]] by Raymond Boute.

  Super neato slides:
  - [[https://www.researchgate.net/publication/294124459_Formal_Calculation_with_Functions_Predicates_and_Quantifiers][Formal Calculation with Functions, Predicates and Quantifiers]]

- [[https://www.cs.yale.edu/homes/aspnes/classes/202/notes.pdf][Notes on Discrete Mathematics]] by James Aspnes

- [[https://www.researchgate.net/publication/221440117_Exercises_in_Quantifier_Manipulation][Exercises in Quantifier Manipulation]] by Roland Backhouse and Diethard
  Michaelis

- [[http://www.cse.unsw.edu.au/~carrollm/probs/Papers/Morgan-12.pdf][Elementary probability theory in the Eindhoven style]] by Carroll Morgan

* Links to docs & notes :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Links-to-docs-notes
  :END:

#+begin_parallel :bar nil

{{{begin-box(pink,)}}}
#+html: <h2>
[[https://alhassy.github.io/CalcCheck/Docs][=CalcCheck= Documentation]]
#+html: </h2>
{{{end-box}}}

#+columnbreak:

{{{begin-box(pink, )}}}
#+html: <h2>
[[https://alhassy.github.io/CalcCheck/LectureNotes.html][Lecture Notes]]
#+html: </h2>
{{{end-box}}}

#+end_parallel

{{{begin-box(cyan, )}}}
#+html: <h2>
Reference Material
#+html: </h2>
| [[http://alhassy.github.io/CalcCheck/2DM3CheatSheet.pdf][PDF “2DM3CheatSheet”]] | /Short/ *4 page* summary of core material; uses informal names.             |
|                      |                                                                         |
| [[http://alhassy.github.io/CalcCheck/TheoremList.html][HTML Theorem List]]    | Uses kbd:CalcCheck names and refers to specific homework and exercises. |

{{{end-box}}}


[[file:images/proof trees vs calculational proofs.png]]

* Videos :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Videos
  :END:

{{{begin-box(#99FFCC, )}}}
#+html: <h2>
Videos
#+html: </h2>

1. [[https://youtu.be/5IyMizFhHMA][Introduction to Discrete & Calculational Maths]]
   kbd:Sep_8

   What is a calculational proof? What is discrete mathematics?
   How is math related to programming: “proofs-as-programs”.

2. [[https://youtu.be/0wM0WXLJULQ][Grammatical Analysis and Boolean Operators]]
   kbd:Sep_10

   A proof is a “story”, and calculation hints are the “transitions” that make
   the story flow nicely.  The formulae are the “sentences” and they are formed
   from operators, constants, and variables which act as “verbs”, “names”, and
   “pronouns”, respectively.

   ℕumber arithmetic is learned by memorising parts of
   infinitely large addition and multiplication tables.
   In contrast, 𝔹oolean arithmetic has tiny 2×2 “truth tables”.
   As such, 𝔹  may be easier to learn than ℕ.

3. [[https://youtu.be/9oeJtu4JjSQ][Ladies and Tigers, a teaser]]
   kbd:Sep_11

   Continuing the discussion on Boolean operators and how they can be used to
   model puzzles.

4. [[https://youtu.be/7cmretG3Zzg][Substitution]]
    kbd:Sep_15

   Textual substitution is a way to implement function application, grafting on
   trees, and can be used for assignment commands in programming.

5. [[https://youtu.be/OXL-FvDqhX8][Inference rules, Proofs-are-programs, and Equivalence Part I]]
   kbd:Sep_17

   Update: There will be no knights and knaves problems in the upcoming Sep 22
   midterm; but possibly in a future midterm.

   The inference rules act as the foundational justification for the equational
   proof style; the online lecture notes go into more detail.

6. [[https://youtu.be/JxRZC2UMJb0][Inference rules, Proofs-are-programs, and Equivalence Part II]]
   (with lofi music) kbd:Sep_18

   Quickly show how a program can be shown to meet its specification,
   discuss equivalence and negation for the purposes of solving
   knights and knaves problems.

   kbd:Sep_22 is the first midterm; it is online during class time.

7. [[https://youtu.be/85MmBPp9jKc][Tabulation vs Calculation]] kbd:Sep_24

   We review basic operations on the Booleans with a focus on how manipulating
   symbols can be more effective than constructing truth tables, or evaluating
   expressions by “plug and chug” simplifications.

   We also discuss formalisations of English phrases as propositional expressions.

8. [[https://youtu.be/XXwKeFW8qBo][The Unfold-fold Heuristic and Induction]] kbd:Sep_25

   When a new operation is introduced, one can reason about it by using its
   definition to ‘see’ familiar operation, manipulate those, then invoke the
   definition to ‘fold-up’.

   To show a property P(n) ranging over natural numbers n : ℕ, it is not
   reasonable to evaluate P at the infinitely many possible values for n.
   Instead one uses mathematical induction.

9. [[https://youtu.be/4oq6mybJvKo][Conjunction]] kbd:Sep_29

   Starting from the Golden Rule, as a definition of conjunction, we see how to
   derive a few properties of ∧ then move on to consider examples involving
   Ladies and Tigers. We wrap up with a brief look at induction.

10. [[https://youtu.be/exz_VWYUJ_k][Induction]] kbd:Oct_1

    We consider a few inductively defined functions and prove properties about
    them.  Of note is ‘monus’, subtraction, which is defined inductively on
    multiple arguments. Then, we consider a few ‘advanced’ implication theorems.

11. [[https://youtu.be/zuZ6ETgdaDw][Replacement]] kbd:Oct_2

    With implication in-hand, we can express the Leibniz inference rule as an
    axiom ---the notes contain a discussion on the relationship between
    inference rules and axioms.

    Continuing with the assignments on Order Theory, we discuss how implication
    is itself an order ---as well as an operation--- on the 𝔹ooleans.

    kbd:Oct_6 is the second midterm; it is online during class time.

12. [[https://youtu.be/d2g7Ez-pU6o][Quantification/Loops and Extended Proof Style]] kbd:Oct_8 with “playground”

    Quantification is a mathematical abstraction of loops:
    ~int s = 0; for(int i = a; i != b; i++){s += f(i);}~
    is an *implementation* of the quantification
    ~(∑ i : ℤ ❙ a ≤ i ≠ b • f i)~.

    We also discuss how *transitivity* can be used
    to extend the calculational proof style
    with other relations besides equality.

13. Proof Techniques and Relaxed Proof Style kbd:Oct_9
    - [[https://youtu.be/G-D7Na_h9BQ][Part 1]] and  [[https://youtu.be/JTeFnHFDK-Y][Part 2]]

    We review how CalcCheck permits relaxed proofs
    such as `with` for modus ponens and `Assuming`
    for implication introduction.

    We also quickly discuss `Using`, which is a way to *use theorems as proof
    techniques*!

    kbd:Oct_9_to_Oct_16 Reading Week, no classes.

14. [[https://youtu.be/AtN03EujI2M][Quantification with ΣΠ∀∃ and Scope]] kbd:Oct_20

    Quickly review basics of quantifiers and their implementations, loops; then
    introduce ∃/∀ as quantifiers (loops, iterations) for ∨/∧; then wrap up with
    the notion of scopes via examples of names in friend groups.

15. [[https://youtu.be/WW1vJbGZ3I8][Midterm Prep: In-depth “Assuming” and some “∀”]] kbd:Oct_22

16. [[https://youtu.be/fFvAa_LNOEo][Theorem Statements Suggest Proof Structure (•̀ᴗ•́)و]] kbd:Oct_23

    We review, compare, and contrast proving theorems directly versus using a
    relaxed proof style. Textual substitution on quantifiers is also reviewed
    briefly.

    # Hey, there are at least 3 ways to prove an implication `P ⇒ Q`:
    # (1) `Assuming P: now prove Q`, (2) turn the whole thing into true `(P ⇒ Q) ≡
    # true`, (3) start with `P` and ‘weaken’ by having ‘⇒’ in the left-column until you
    # get to `Q`, (4) start with `Q~ and ‘strengthen’ by having ‘⇐’ in the left-column
    # until you get to `P`.
    #

    kbd:Oct_27 is the third midterm; it is online during class time and the
   ‘Midterm Prep’ was created to, well, prepare you for the midterm.

17. [[https://youtu.be/h6I-K2vmGcM][Feedback Replies & Quantification]]
    kbd:Oct_29

    Let's discuss the entries posted on the feedback channel as well as
    impressions of the previous midterm. Then let's continue with Quantification
    and it's possible implementations via loops.

18. Monotonicity: From ∧/∨ to ∀/∃ kbd:Nov_3

    [[https://youtu.be/RYXFOSevpvM][Part 1]] and [[https://youtu.be/PFYrBrmd-1k][Part 2]]

    We discuss order preservation rules then move on to talk about (general)
    induction and how it can be invoked with CalcCheck's “Using” mechanism
    ---which allows a theorem to be used as a proof technique.

19. [[https://youtu.be/Qm6o0gn8xz8][Sequences and Induction]] kbd:Nov_5

    The idea behind induction is that if a property holds for atomic
    constructions and the property is preserved by compound constructions then
    ---since everything under consideration is formed from these possible
    constructions--- everything has the property begin discussed.

    Incidentally, induction can also be phrased more compactly as follows:
    /Predicates starting at ‘true’ and preserving truth, are constantly ‘true’/:
    Suppose $P : τ → 𝔹$ is a predicate on an ordered space, then
    \[P\, ⊥ \;∧\; (∀ x,y : τ \,❙\, x ⊑ y • P\, x \,⇒\, P\, y) \;⇒\; (∀ x : τ • P\, x) \]

20. [[https://youtu.be/tY_kwfU3Vjo][“Typed” Set Theory 𝑰]] kbd:Nov_6

    Sets are like any other data structure, such as ℕumbers or sequences.
    However, there is a particular ‘reflection’ of types-as-sets: Every type is
    a set, but not the other way around. ( Likewise, every sequence yields a
    set, but no canonical choice the other way around. )

    *Types make sure things don't go wrong, such as multiplying a set by a
    letter!*

    kbd:Nov_10 is the fourth midterm; it is online during class time.

21. [[https://youtu.be/RlGEVZ-5tGo][“Typed” Set Theory 𝑰𝑰]] kbd:Nov_12

    Continuing part 𝑰.

22. [[https://youtu.be/0bb9-I5RC74][Cartesian Products, a theory of records]] kbd:Nov_13

    We look at Cartesian Products and projections, which can be thought of as
    the mathematical underpinning of “records/classes and fields” found in
    programming.

    We also quickly take a look at Currying ---yet another instance of the
    “Programming ≈ Proving” slogan repeated throughout these lectures.

    Finally, we consider sets of pairs, ‘relations’, as a form of
    non-deterministic computing.

23. [[https://youtu.be/cuCy3jprIFY][A ‘Brutal’ Introduction to Relations]] kbd:Nov_17

    We conclude Set Theory with an example of “division of sets” known as the
    pseudo-complement: We show how it's defining universal property can be used
    to calculate an explicit definition. Assuming ⊆ and ∈, the same idea applies
    to other concepts defined by universal properties, such as ╱, ╲, ∪, ∩, and
    -.

    Next, we look at specific kinds of sets, namely sets of pairs.  Just as sets
    “hide singe quantified variables” involving ∀ via = and ⊆, and hide ∃ via ∈;
    relations allows us to “hide two quantified variables”.  More generally,
    “n-ary relations” with n = 0 are propositions, n = 1 are predicates/sets,
    and with n = 2 are simple relations, as shown here.

    Compare with “A ‘Gentle’ Introduction to Relations (Nov 19)”.

24. [[https://youtu.be/9U9bn047egY][A ‘Gentle’ Introduction to Relations]] kbd:Nov_19

    Relations are just sets of pairs, but there are interesting interpretations
    of such sets: Matrices, Graphs, Programs.  As such, there are interesting
    operations on these particular kinds of sets such as converse and
    composition.

    Operations on relations, such as composition, “hide quantified dummy
    variables” and so “wide, lengthy, statements” take on more compact forms.  A
    useful law involving quantifier-free calculations is the Dedekind rule and
    the Modal laws.  An example involving the distributivity of univalent
    relations over intersection is shown.

    Compare with “A ‘Brutal’ Introduction to Relations (Nov 17)”.

25. [[https://youtu.be/co-EEY222EI][Wrapping up Relations]] kbd:Nov_20

    Concluding our discussion on relations by considering how “relation
    division” appears ---either the shape of residuals “R ╱ S” or via converse
    “R ⨾ S˘” and the Modal & Dedekind rules.

    We then look at how this allows us to read the Z ISO standard, and begin
    combinatorics by counting the size of certain kinds of arrows.

    kbd:Nov_24 is the fifth midterm; it is online during class time.

    ------------------------------------------------------------------------------------------

26. [[https://youtu.be/AiU67vfxCJI][ISO Z Standard & Combinatorics]]
    kbd:Nov_26

    Since Midterm 5 showed that not everyone is very comfortable with relations,
    the plan is not to “bulldoze onward” to new material but instead to
    “ping-pong” between new material, and to connect it back to relations to
    reinforce the concepts therein. A few fun graphs are shown.

    #+begin_details Sequences vs Sets vs Bags
    - Sequence: [x₀, x₁, …, xₙ] ... order and multiplicity matter
    - Set     : {x₀, x₁, …, xₙ} ... neither order nor multiplicity matter
    - Bag     : ⦃x₀, x₁, …, xₙ⦄ or ⟅x₀, …, xₙ⟆  order doesn't matter but multiplicity does

    #
    -  Sets ≈ exitence is enough  .... “∈” is the key!!
    -  Bags ≈ I *need* to know which one ... “♯” “how many times is it there?”
    -  Bags ≈ multi-relations = multi-sets
    #+end_details

27. [@27] [[https://youtu.be/RcpgzDvMKxA][Multirelations!]]
    kbd:Nov_27

    We speak of people in Toronto sharing the same number of hair, multiple
    edges in a graph, and how bags account for “mor information” by yielding the
    number of times an element occurs whereas sets only care “whether it's there
    or not” ---this is reminicient of classical vs constructive maths.  A few
    fun graphs are shown.

28. [[https://youtu.be/H0FE-0WiAPI][Reachability]]
    kbd:Dec_1

    We quickly review bags ---multisets--- and then talk about closures, which
    capture the idea of “add just enough so the result has the deisred
    property”.  This then leads us to talk about transitive closures which can
    be used to to *elegantly* express proeprties on graphs that would otherwise be
    a nightmare to work with (if quantifiers, ∀∃, were used).

29. [[https://youtu.be/0LO1SkdmRBU][Trees]]
    kbd:Dec_3

    Directed, acyclic, connected graphs are known as trees.  They have the
    particular property that they can be expressed as inductive data types:
    Whereas a sequence is either empty ε or has a right-child ~x ◁ r~, a tree is
    either empty ◬ or has *two* children ~l ◿ x ◺ r~. We also look at other examples
    of inductively defined structures and briefly mention topological sort.

30. [[https://youtu.be/kR_Xl1oM4Cg][Wrapping up the term: Closures, Topological Sort, Probability Theory]]
    kbd:Dec_4

    We finish the discussion on closures and kerneal that was started last time.
    We look at DAGs and how they allow ‘sharing’ of structure and how we can
    traverse graphs: We show visitation and topological sorting.  Finally, we
    wrap up with a terse introduction to probability theory as “Σ in disguise”
    and close with inference rules/trees and structural induction (•̀ᴗ•́)و

31. [[https://youtu.be/BSnCxcpCEK0][Closing off with some induction example in *Agda*]]
    kbd:Dec_8

    /All the best with exams!/

:Video_description:
 ─⟦Maths for Computing 𝓃⟧

?

Associated notes: https://alhassy.github.io/CalcCheck/
:End:

{{{end-box}}}

| ⇨ [[https://github.com/alhassy/CalcCheck][Github Repository]] ⇦ |

[[file:images/course_overview.png]]
