#+title: Calculational Mathematics and ~CalcCheck~
# +subtitle: Abrdiged Lecture Notes
#+author: Musa Al-hassy
#+options: tags:nil d:nil
#+PROPERTY: header-args:calccheck :tangle (concat (file-name-sans-extension (buffer-name)) ".calc") :comments nil

#+Description: Abrdiged Lecture Notes

# Make HTML
# (f-move (org-html-export-to-html) "~/CalcCheck/index.html")
# (f-move (org-md-export-to-markdown) "~/CalcCheck/README.md")
#+HTML_HEAD: <link href="https://alhassy.github.io/org-notes-style.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/floating-toc.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/blog-banner.css" rel="stylesheet" type="text/css" />
# The last one has the styling for lists.

# $1 colour eg ‚Äúpink‚Äù or ‚Äúhsl(157 75% 20%)‚Äù or ‚Äú#e5f5e5‚Äù; $2 title
#+macro: begin-box @@html: <div style="padding: 1em; background-color: $1; border-radius: 15px; font-size: 0.9em; box-shadow: 0.05em 0.1em 5px 0.01em  #00000057;"> <h3>$2</h3>@@

#+macro: end-box @@html: </div>@@

* TODO COMMENT Books
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Books
  :END:
{{{begin-box(#E5E7E9 , hi)}}}

 + Program Construction
 + LADM
 + [[https://fourferries.com/wp-content/uploads/2016/10/StructuredDerivation26092016.pdf][Structured Derivations: Teaching Mathematical Reasoning in High School]]

   Online and covers a variety of topics, including limits and probability
   theory.


[[https://avenue.cllmcmaster.ca/d2l/lms/links/link_newedit.d2l?ext=0&linkid=97717&ou=347775][Using Z]]

Z (pronouced "Zed") is a standardised mathematical notation intended for software specification.
For universal and existential quantification, CalcCheck uses the same notation as Z.

The first half of the book "Using Z" is an introduction to logic via natural deduction, and to basic discrete mathematics covering set, functions, and relations, all in the Z notation.

{{{end-box}}}

* Links to docs & notes :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Links-to-docs-notes
  :END:

#+begin_parallelNB

{{{begin-box(pink,)}}}
#+html: <h2>
[[https://alhassy.github.io/CalcCheck/Docs][=CalcCheck= Documentation]]
#+html: </h2>
{{{end-box}}}

:columnbreak:

{{{begin-box(pink, )}}}
#+html: <h2>
[[https://alhassy.github.io/CalcCheck/LectureNotes.html][Lecture Notes]]
#+html: </h2>
{{{end-box}}}

#+end_parallelNB

[[file:images/proof trees vs calculational proofs.png]]

* Videos :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Videos
  :END:

{{{begin-box(#99FFCC, )}}}
#+html: <h2>
Videos
#+html: </h2>

1. Introduction to Discrete & Calculational Maths ‚îÄ[[https://web.microsoftstream.com/video/76eac408-540e-47f9-a83b-d2caad93443c][Wolfram]], [[https://youtu.be/5IyMizFhHMA][Musa]] kbd:Sep_8

   What is a calculational proof? What is discrete mathematics?
   How is math related to programming: ‚Äúproofs-as-programs‚Äù.

2. Grammatical Analysis and Boolean Operators ‚îÄ[[https://web.microsoftstream.com/video/3216c424-1494-4ed1-9f7d-6591bde71fc3][Wolfram]] (only second part), [[https://youtu.be/0wM0WXLJULQ][Musa]]  kbd:Sep_10

   A proof is a ‚Äústory‚Äù, and calculation hints are the ‚Äútransitions‚Äù that make
   the story flow nicely.  The formulae are the ‚Äúsentences‚Äù and they are formed
   from operators, constants, and variables which act as ‚Äúverbs‚Äù, ‚Äúnames‚Äù, and
   ‚Äúpronouns‚Äù, respectively.

   ‚Ñïumber arithmetic is learned by memorising parts of
   infinitely large addition and multiplication tables.
   In contrast, ùîπoolean arithmetic has tiny 2√ó2 ‚Äútruth tables‚Äù.
   As such, ùîπ  may be easier to learn than ‚Ñï.

3. Ladies and Tigers, a teaser ‚îÄ[[https://web.microsoftstream.com/video/3153223e-a48a-4177-bb2b-013d0694b336][Wolfram]], [[https://youtu.be/9oeJtu4JjSQ][Musa]]  kbd:Sep_11

   Continuing the discussion on Boolean operators
   and how they can be used to model puzzles.

4. Substitution ‚îÄWolfram (not yet available), [[https://youtu.be/7cmretG3Zzg][Musa]]  kbd:Sep_15

   Textual substitution is a way to implement function application,
   grafting on trees, and can be used for assignment commands in programming.

5. Inference rules, Proofs-are-programs, and Equivalence Part I ‚îÄWolfram (not
   yet available), [[https://youtu.be/OXL-FvDqhX8][Musa]] kbd:Sep_17

   Update: There will be no knights and knaves problems in the upcoming Sep 22 midterm;
   but possibly in a future midterm.

   The inference rules act as the foundational justification for the equational
   proof style; the online lecture notes go into more detail.

6. Inference rules, Proofs-are-programs, and Equivalence Part II ‚îÄWolfram (not
   yet available), [[https://youtu.be/JxRZC2UMJb0][Musa]] (with lofi music) kbd:Sep_18

   Quickly show how a program can be shown to meet its specification,
   discuss equivalence and negation for the purposes of solving
   knights and knaves problems.

7. [[color:red][*not yet given*]]

   kbd:Sep_22 is the first midterm; it is online during class time.

:Video_description:
 ‚îÄ‚ü¶Maths for Computing ùìÉ‚üß

?

Associated notes: https://alhassy.github.io/CalcCheck/
:End:

{{{end-box}}}

| ‚á® [[https://github.com/alhassy/CalcCheck][Github Repository]] ‚á¶ |
